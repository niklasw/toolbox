--------------------------------------------------------------------------------
--  Copyright (c) 2013 Intelligent Light                                      --
--  All rights reserved.                                                      --
--                                                                            --
--  This sample FVX script is not supported by Intelligent Light              --
--  and Intelligent Light provides no warranties or assurances                --
--  about its fitness or merchantability.  It is provided at no               --
--  cost and is for demonstration purposes only.                              --
--------------------------------------------------------------------------------



--------------------------------------------------------------------------------
--            DATA INPUT
--------------------------------------------------------------------------------
local datasets_info_table = {}
datasets_info_table[1] = read_dataset( {
    data_format = "openfoam",
    server_config = "noboru16",
    input_parameters = {
        name = "/home/nikwik/OpenFOAM/nikwik-2.3.x/run/thalassa/m4/freeSurface/fullScale/meshFs1/system/decomposeParDict",
        options = {
            input_mode = "replace",
            boundary_only = "off"
        } -- options
    } -- input_parameters
} ) -- read_dataset

-- print_dataset_table( datasets_info_table[1] )

set_transient( { time_step = 114000 }, 1 )

--------------------------------------------------------------------------------
--            FORMULAS
--------------------------------------------------------------------------------
fv_script("RESTART FORMULA /home/nikwik/toolbox/fieldView/restarts/fs/lamda2.frm")

--------------------------------------------------------------------------------
--            ISO-SURFACES
--------------------------------------------------------------------------------
local iso_surfs={}

iso_surfs[1] = create_iso(
    {
        scalar_colormap = {
            name = "spectrum",
            invert = "off",
            filled_contour = "off",
        }, -- scalar_colormap
        transparency = 0,
        show_legend = "off",
        number_of_contours = 16,
        scalar_range = {
            abs_max = 5.381697654724121,
            local_min = -0.6254382729530334,
            min = -0.6254382729530334,
            abs_min = -2.632273197174072,
            max = 1.5,
            local_max = 3.99089527130127,
            use_local = "on",
        }, -- scalar_range
        visibility = "on",
        line_type = "thin",
        iso_value = {
            abs_max = 73.482421875,
            current = 0.5,
            max = 73.482421875,
            abs_min = -383427680,
            min = -383427680,
        }, -- iso_value
        display_type = "smooth_shading",
        contours = "none",
        show_mesh = "off",
        vector_func = "none",
        scalar_func = "Ux_norm",
        geometric_color = 4,
        unrolled = "off",
        threshold_func = "none",
        dataset = 1,
        iso_func = "lambda2",
    }
) -- iso_surfs[1]


iso_surfs[2] = create_iso(
    {
        scalar_colormap = {
            name = "/home/nikwik/toolbox/fieldView/colormaps/blue_white.col",
            invert = "off",
            filled_contour = "off",
        }, -- scalar_colormap
        transparency = 0.625,
        show_legend = "off",
        number_of_contours = 16,
        scalar_range = {
            abs_max = 22,
            local_min = -0.581512451171875,
            min = -0.581512451171875,
            abs_min = -102,
            max = 0.4927940964698792,
            local_max = 0.4927940964698792,
            use_local = "on",
        }, -- scalar_range
        visibility = "on",
        line_type = "thin",
        iso_value = {
            abs_max = 1.000003933906555,
            current = 0.5,
            max = 1.000003933906555,
            abs_min = -2.046731228944054e-09,
            min = -2.046731228944054e-09,
        }, -- iso_value
        display_type = "smooth_shading",
        contours = "none",
        show_mesh = "off",
        vector_func = "none",
        scalar_func = "H",
        geometric_color = 4,
        unrolled = "off",
        threshold_func = "none",
        dataset = 1,
        iso_func = "alpha.water",
    }
) -- iso_surfs[2]


--------------------------------------------------------------------------------
--            BOUNDARY SURFACES
--------------------------------------------------------------------------------
local boundary_surfs={}

boundary_surfs[1] = create_boundary(
    {
        transparency = 0,
        show_legend = "off",
        number_of_contours = 16,
        visibility = "on",
        line_type = "thin",
        geometric_color = 4,
        types = {
            "wall_pitchplanes",
            "wall_rudders",
            "wall_hull",
        }, -- types
        display_type = "smooth_shading",
        contours = "none",
        vector_func = "none",
        scalar_func = "none",
        dataset = 1,
        threshold_func = "none",
        show_mesh = "off",
    }
) -- boundary_surfs[1]


--------------------------------------------------------------------------------
--            VIEWING PARAMETERS
--------------------------------------------------------------------------------
fv_script("RESTART VIEW /home/nikwik/toolbox/fieldView/restarts/fs/lamda2.vct")

--------------------------------------------------------------------------------
--            COLORMAP
--------------------------------------------------------------------------------
fv_script("RESTART COLOR /home/nikwik/toolbox/fieldView/restarts/fs/lamda2.map")

--------------------------------------------------------------------------------
--            PRESENTATION RENDERING
--------------------------------------------------------------------------------
fv_script("RESTART PRESENTATION /home/nikwik/toolbox/fieldView/restarts/fs/lamda2.prd")

--------------------------------------------------------------------------------
--            TRANSIENT COMMANDS
--------------------------------------------------------------------------------
-- Uncomment the next line to return a table containing time step and
-- solution time information for the dataset:
-- transient_info_DS_1 = query_transient( 1 )

-- Uncomment the next line to display the content of the table:
-- dumpall(transient_info_DS_1)

-- Uncomment the next block to sweep the transient dataset:
-- sweep_time( {
--         from_time_step = "first",
--         to_time_step = "last"
--     }, 1 ) -- sweep_time




--------------------------------------------------------------------------------
--            DATASET QUERIES
--------------------------------------------------------------------------------
local boundary_types_DS={}
local scalar_functions_DS={}
local vector_functions_DS={}
local surface_scalar_functions_DS={}
local surface_vector_functions_DS={}

print ("")
-- BOUNDARY TYPES FOR DATASET 1
boundary_types_DS[1] = get_all_boundary_types( 1 )
if getn( boundary_types_DS[1] ) ~= 0 then
    print ("BOUNDARY TYPES FOR DATASET 1")
    for i, v in boundary_types_DS[1] do
        if type(v) == "string" then
            print ("    "..v)
        end
    end
    print ("")
end

-- SCALAR FUNCTIONS FOR DATASET 1
scalar_functions_DS[1] = get_scalar_functions( 1 )
if getn( scalar_functions_DS[1]) ~= 0 then
    print("SCALAR FUNCTIONS FOR DATASET 1")
    for i, v in scalar_functions_DS[1] do
        if type(v) == "string" then
            print ("    "..v)
        end
    end
    print ("")
end

-- VECTOR FUNCTIONS FOR DATASET 1
vector_functions_DS[1] = get_vector_functions( 1 )
if getn( vector_functions_DS[1]) ~= 0 then
    print("VECTOR FUNCTIONS FOR DATASET 1")
    for i, v in vector_functions_DS[1] do
        if type(v) == "string" then
            print ("    "..v)
        end
    end
    print ("")
end

-- SURFACE SCALAR FUNCTIONS FOR DATASET 1
surface_scalar_functions_DS[1] = get_surface_scalar_functions( 1 )
if getn( surface_scalar_functions_DS[1]) ~= 0 then
    print("SURFACE SCALAR FUNCTIONS FOR DATASET 1")
    for i, v in surface_scalar_functions_DS[1] do
        if type(v) == "string" then
            print ("    "..v)
        end
    end
    print ("")
end

-- SURFACE VECTOR FUNCTIONS FOR DATASET 1
surface_vector_functions_DS[1] = get_surface_vector_functions( 1 )
if getn( surface_vector_functions_DS[1]) ~= 0 then
    print("SURFACE VECTOR FUNCTIONS FOR DATASET 1")
    for i, v in surface_vector_functions_DS[1] do
        if type(v) == "string" then
            print ("    "..v)
        end
    end
    print ("")
end

print("")


--------------------------------------------------------------------------------
--            GLOBAL QUERIES
--------------------------------------------------------------------------------
-- DEFAULT COLORTABLE AND COLORTABLE
local print_colortable = function( tbl_name, tbl )
    if getn(tbl) ~= 0 then
       for i, v in tbl do
           -- Skip 'n', the size of the the table
           if type(i) == "number" and type(v) == "table" then
               print("    "..tbl_name.."["..i.."] = {")
               if v.name then
                   print("        name = "..v.name..",")
               end
               print("        red = "..v.red..",")
               print("        green = "..v.green..",")
               print("        blue = "..v.blue)
               print("    }\n")
           end
       end
       print("")
    end
end -- print_colortable

local colortable = query_colortable()
print("")
print("COLORTABLE")
print_colortable( "colortable", colortable )


local default_colortable = query_default_colortable()
print("DEFAULT COLORTABLE")
print_colortable("default_colortable", default_colortable)

-- STREAMLINE AND PARTICLE PATHS DISPLAY
local streamline_display = query_streamline_display()

print ("streamline_display = {")
for i, v in streamline_display do
    if type(v) == "string" then
       print ("    "..tostring(i).." = \""..tostring(v).."\",")
    elseif type(v) == "number" then
       print ("    "..tostring(i).." = "..tostring(v)..",")
    end
end
print ("} -- streamline_display")

print("")
local particle_paths_display = query_particle_paths_display()
print ("particle_paths_display = {")
for i, v in particle_paths_display do
    if type(v) == "string" then
       print ("    "..tostring(i).." = \""..tostring(v).."\",")
    elseif type(v) == "number" then
       print ("    "..tostring(i).." = "..tostring(v)..",")
    end
end
print ("} -- particle_paths_display")
