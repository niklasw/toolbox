--------------------------------------------------------------------------------
--  Copyright (c) 2013 Intelligent Light                                      --
--  All rights reserved.                                                      --
--                                                                            --
--  This sample FVX script is not supported by Intelligent Light              --
--  and Intelligent Light provides no warranties or assurances                --
--  about its fitness or merchantability.  It is provided at no               --
--  cost and is for demonstration purposes only.                              --
--------------------------------------------------------------------------------



--------------------------------------------------------------------------------
--            DATA INPUT
--------------------------------------------------------------------------------
local datasets_info_table = {}
datasets_info_table[1] = read_dataset( {
    data_format = "openfoam",
    server_config = "spiller16",
    input_parameters = {
        name = "/home/mattjo/OpenFOAM/mattjo-1.6.xFOI/run/thalassa/FULL_SCALE/STRAIGHT_COURSE/system/decomposeParDict",
        options = {
            input_mode = "replace",
            boundary_only = "off"
        } -- options
    } -- input_parameters
} ) -- read_dataset

-- print_dataset_table( datasets_info_table[1] )

set_transient( { time_step = 343094 }, 1 )

--------------------------------------------------------------------------------
--            FORMULAS
--------------------------------------------------------------------------------
fv_script("RESTART FORMULA /home/mattjo/cfd/postProcess/m4/FULL_SCALE/STRAIGHT_COURSE/lamda2.frm")

--------------------------------------------------------------------------------
--            ISO-SURFACES
--------------------------------------------------------------------------------
local iso_surfs={}

iso_surfs[1] = create_iso(
    {
        scalar_colormap = {
            name = "spectrum",
            invert = "off",
            filled_contour = "off",
        }, -- scalar_colormap
        transparency = 0,
        show_legend = "off",
        number_of_contours = 16,
        scalar_range = {
            abs_max = 3.424699306488037,
            local_min = -1.167177200317383,
            min = -1.413270950317383,
            abs_min = -1.307834625244141,
            max = 3.428860902786255,
            local_max = 3.422348499298096,
            use_local = "off",
        }, -- scalar_range
        visibility = "on",
        line_type = "thin",
        iso_value = {
            abs_max = 56.0667724609375,
            current = 0.1000000014901161,
            max = 56.0667724609375,
            abs_min = -449.7366333007812,
            min = -449.7366333007812,
        }, -- iso_value
        display_type = "smooth_shading",
        contours = "none",
        show_mesh = "off",
        vector_func = "none",
        scalar_func = "U_x",
        geometric_color = 4,
        unrolled = "off",
        threshold_func = "X",
        dataset = 1,
        threshold_range = {
            abs_max = 202.0000610351562,
            max = 202.0000610351562,
            abs_min = -101.0000305175781,
            min = 8,
        }, -- threshold_range
        iso_func = "lambda2",
    }
) -- iso_surfs[1]


--------------------------------------------------------------------------------
--            BOUNDARY SURFACES
--------------------------------------------------------------------------------
local boundary_surfs={}

boundary_surfs[1] = create_boundary(
    {
        transparency = 0,
        show_legend = "off",
        number_of_contours = 16,
        visibility = "on",
        line_type = "thin",
        geometric_color = 4,
        types = {
            "HULL",
            "RUDDERS",
            "PITCHPLANES",
        }, -- types
        display_type = "smooth_shading",
        contours = "none",
        vector_func = "none",
        scalar_func = "none",
        dataset = 1,
        threshold_func = "none",
        show_mesh = "off",
    }
) -- boundary_surfs[1]


--------------------------------------------------------------------------------
--            COORDINATE SURFACES
--------------------------------------------------------------------------------
local coord_surfs={}

coord_surfs[1] = create_coord(
    {
        scalar_colormap = {
            name = "spectrum",
            invert = "off",
            filled_contour = "off",
        }, -- scalar_colormap
        transparency = 0,
        show_legend = "on",
        number_of_contours = 64,
        Z_axis = {
            abs_max = 75.75,
            max = 75.75,
            abs_min = -75.74990081787109,
            min = -75.74990081787109,
        }, -- Z_axis
        legend = {
            type = "spectrum",
            scale_height = 1.834931135177612,
            spectrum = {
                border = "off",
                colorbar = "on",
                horizontal = "yes",
                num_labels = 4,
            }, -- spectrum
            annotation = "on",
            annotation_parameters = {
                position = "top",
                subtitle = {
                    size = 1,
                    color = "black",
                    text = "",
                    font = "lee",
                }, -- subtitle
                title = {
                    size = 10,
                    color = "black",
                    text = "%%SCALAR_FUNC",
                    font = "lee",
                }, -- title
            }, -- annotation_parameters
            frame = "off",
            labels_parameters = {
                size = 10,
                coloring = "black",
                decimal_places = 1,
                numerical_format = "floating_point",
                font = "lee",
            }, -- labels_parameters
            relative_position = {
                0.4443390071392059,
                -0.5726410150527954,
            }, -- relative_position
            background = "off",
            scale_width = 1.042239904403687,
            labels = "on",
        }, -- legend
        Y_axis = {
            abs_max = 75.75002288818359,
            max = 75.75002288818359,
            abs_min = -75.74925231933594,
            min = -75.74925231933594,
        }, -- Y_axis
        line_type = "thin",
        geometric_color = 4,
        scalar_range = {
            abs_max = 1.448447346687317,
            local_min = -0.1038514599204063,
            min = 0,
            abs_min = -0.5467962026596069,
            max = 1.200000047683716,
            local_max = 1.00179660320282,
            use_local = "off",
        }, -- scalar_range
        display_type = "contour_lines",
        contours = "none",
        ruled_grid = "off",
        show_mesh = "off",
        threshold_func = "none",
        axis = "X",
        vector_func = "none",
        visibility = "off",
        scalar_func = "Umeanx_norm",
        X_axis = {
            abs_max = 202.0000610351562,
            current = 50.6515007019043,
            max = 202.0000610351562,
            abs_min = -101.0000305175781,
            min = -101.0000305175781,
        }, -- X_axis
        dataset = 1,
    }
) -- coord_surfs[1]


--------------------------------------------------------------------------------
--            VIEWING PARAMETERS
--------------------------------------------------------------------------------
fv_script("RESTART VIEW /home/mattjo/cfd/postProcess/m4/FULL_SCALE/STRAIGHT_COURSE/lamda2.vct")

--------------------------------------------------------------------------------
--            COLORMAP
--------------------------------------------------------------------------------
fv_script("RESTART COLOR /home/mattjo/cfd/postProcess/m4/FULL_SCALE/STRAIGHT_COURSE/lamda2.map")

--------------------------------------------------------------------------------
--            PRESENTATION RENDERING
--------------------------------------------------------------------------------
fv_script("RESTART PRESENTATION /home/mattjo/cfd/postProcess/m4/FULL_SCALE/STRAIGHT_COURSE/lamda2.prd")

--------------------------------------------------------------------------------
--            TRANSIENT COMMANDS
--------------------------------------------------------------------------------
-- Uncomment the next line to return a table containing time step and
-- solution time information for the dataset:
-- transient_info_DS_1 = query_transient( 1 )

-- Uncomment the next line to display the content of the table:
-- dumpall(transient_info_DS_1)

-- Uncomment the next block to sweep the transient dataset:
-- sweep_time( {
--         from_time_step = "first",
--         to_time_step = "last"
--     }, 1 ) -- sweep_time




--------------------------------------------------------------------------------
--            DATASET QUERIES
--------------------------------------------------------------------------------
local boundary_types_DS={}
local scalar_functions_DS={}
local vector_functions_DS={}
local surface_scalar_functions_DS={}
local surface_vector_functions_DS={}

print ("")
-- BOUNDARY TYPES FOR DATASET 1
boundary_types_DS[1] = get_all_boundary_types( 1 )
if getn( boundary_types_DS[1] ) ~= 0 then
    print ("BOUNDARY TYPES FOR DATASET 1")
    for i, v in boundary_types_DS[1] do
        if type(v) == "string" then
            print ("    "..v)
        end
    end
    print ("")
end

-- SCALAR FUNCTIONS FOR DATASET 1
scalar_functions_DS[1] = get_scalar_functions( 1 )
if getn( scalar_functions_DS[1]) ~= 0 then
    print("SCALAR FUNCTIONS FOR DATASET 1")
    for i, v in scalar_functions_DS[1] do
        if type(v) == "string" then
            print ("    "..v)
        end
    end
    print ("")
end

-- VECTOR FUNCTIONS FOR DATASET 1
vector_functions_DS[1] = get_vector_functions( 1 )
if getn( vector_functions_DS[1]) ~= 0 then
    print("VECTOR FUNCTIONS FOR DATASET 1")
    for i, v in vector_functions_DS[1] do
        if type(v) == "string" then
            print ("    "..v)
        end
    end
    print ("")
end

-- SURFACE SCALAR FUNCTIONS FOR DATASET 1
surface_scalar_functions_DS[1] = get_surface_scalar_functions( 1 )
if getn( surface_scalar_functions_DS[1]) ~= 0 then
    print("SURFACE SCALAR FUNCTIONS FOR DATASET 1")
    for i, v in surface_scalar_functions_DS[1] do
        if type(v) == "string" then
            print ("    "..v)
        end
    end
    print ("")
end

-- SURFACE VECTOR FUNCTIONS FOR DATASET 1
surface_vector_functions_DS[1] = get_surface_vector_functions( 1 )
if getn( surface_vector_functions_DS[1]) ~= 0 then
    print("SURFACE VECTOR FUNCTIONS FOR DATASET 1")
    for i, v in surface_vector_functions_DS[1] do
        if type(v) == "string" then
            print ("    "..v)
        end
    end
    print ("")
end

print("")


--------------------------------------------------------------------------------
--            GLOBAL QUERIES
--------------------------------------------------------------------------------
-- DEFAULT COLORTABLE AND COLORTABLE
local print_colortable = function( tbl_name, tbl )
    if getn(tbl) ~= 0 then
       for i, v in tbl do
           -- Skip 'n', the size of the the table
           if type(i) == "number" and type(v) == "table" then
               print("    "..tbl_name.."["..i.."] = {")
               if v.name then
                   print("        name = "..v.name..",")
               end
               print("        red = "..v.red..",")
               print("        green = "..v.green..",")
               print("        blue = "..v.blue)
               print("    }\n")
           end
       end
       print("")
    end
end -- print_colortable

local colortable = query_colortable()
print("")
print("COLORTABLE")
print_colortable( "colortable", colortable )


local default_colortable = query_default_colortable()
print("DEFAULT COLORTABLE")
print_colortable("default_colortable", default_colortable)

-- STREAMLINE AND PARTICLE PATHS DISPLAY
local streamline_display = query_streamline_display()

print ("streamline_display = {")
for i, v in streamline_display do
    if type(v) == "string" then
       print ("    "..tostring(i).." = \""..tostring(v).."\",")
    elseif type(v) == "number" then
       print ("    "..tostring(i).." = "..tostring(v)..",")
    end
end
print ("} -- streamline_display")

print("")
local particle_paths_display = query_particle_paths_display()
print ("particle_paths_display = {")
for i, v in particle_paths_display do
    if type(v) == "string" then
       print ("    "..tostring(i).." = \""..tostring(v).."\",")
    elseif type(v) == "number" then
       print ("    "..tostring(i).." = "..tostring(v)..",")
    end
end
print ("} -- particle_paths_display")
